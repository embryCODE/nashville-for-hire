// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchPageComponent matches snapshot 1`] = `
<Page
  description="SearchPage.schemaDescription"
  schema={
    Object {
      "@context": "http://schema.org",
      "@type": "SearchResultsPage",
      "description": "SearchPage.schemaDescription",
      "mainEntity": Array [
        "{\\"@type\\":\\"ItemList\\",\\"name\\":\\"SearchPage.schemaMapSearch\\",\\"itemListOrder\\":\\"http://schema.org/ItemListOrderAscending\\",\\"itemListElement\\":[]}",
      ],
      "name": "SearchPage.schemaTitle",
    }
  }
  scrollingDisabled={false}
  title="SearchPage.schemaTitle"
>
  <withRouter(Connect(TopbarContainerComponent))
    currentPage="SearchPage"
    currentSearchParams={Object {}}
  />
  <div>
    <MainPanel
      className={null}
      filterConfig={
        Array [
          Object {
            "config": Object {},
            "group": "primary",
            "id": "dates",
            "label": "Dates",
            "queryParamNames": Array [
              "dates",
            ],
            "type": "BookingDateRangeFilter",
          },
          Object {
            "config": Object {
              "max": 1000,
              "min": 0,
              "step": 5,
            },
            "group": "primary",
            "id": "price",
            "label": "Price",
            "queryParamNames": Array [
              "price",
            ],
            "type": "PriceFilter",
          },
          Object {
            "config": Object {},
            "group": "primary",
            "id": "keyword",
            "label": "Keyword",
            "queryParamNames": Array [
              "keywords",
            ],
            "type": "KeywordFilter",
          },
          Object {
            "config": Object {
              "options": Array [
                Object {
                  "key": "femaleVocals",
                  "label": "Female Vocals",
                },
                Object {
                  "key": "maleVocals",
                  "label": "Male Vocals",
                },
                Object {
                  "key": "songwriting",
                  "label": "Songwriting",
                },
                Object {
                  "key": "topline",
                  "label": "Topline",
                },
                Object {
                  "key": "acousticGuitar",
                  "label": "Acoustic Guitar",
                },
                Object {
                  "key": "electricGuitar",
                  "label": "Electric Guitar",
                },
                Object {
                  "key": "bass",
                  "label": "Bass",
                },
                Object {
                  "key": "drums",
                  "label": "Drums",
                },
                Object {
                  "key": "piano",
                  "label": "Piano",
                },
                Object {
                  "key": "keys",
                  "label": "Keys",
                },
                Object {
                  "key": "synth",
                  "label": "Synth",
                },
                Object {
                  "key": "organ",
                  "label": "Organ",
                },
                Object {
                  "key": "beatProgramming",
                  "label": "Beat Programming",
                },
                Object {
                  "key": "cello",
                  "label": "Cello",
                },
                Object {
                  "key": "violin",
                  "label": "Violin",
                },
                Object {
                  "key": "fiddle",
                  "label": "Fiddle",
                },
                Object {
                  "key": "fullStringArrangement",
                  "label": "Full String Arrangement",
                },
                Object {
                  "key": "pedalSteel",
                  "label": "Pedal Steel",
                },
                Object {
                  "key": "bango",
                  "label": "Banjo",
                },
                Object {
                  "key": "dobro",
                  "label": "Dobro",
                },
                Object {
                  "key": "lapSteel",
                  "label": "Lap Steel",
                },
                Object {
                  "key": "harmonica",
                  "label": "Harmonica",
                },
                Object {
                  "key": "trumpet",
                  "label": "Trumpet",
                },
                Object {
                  "key": "trombone",
                  "label": "Trombone",
                },
                Object {
                  "key": "saxophone",
                  "label": "Saxophone",
                },
                Object {
                  "key": "hornSection",
                  "label": "Horn Section",
                },
                Object {
                  "key": "mixing",
                  "label": "Mixing",
                },
                Object {
                  "key": "mastering",
                  "label": "Mastering",
                },
                Object {
                  "key": "produce",
                  "label": "Produce Your Entire Song",
                },
              ],
            },
            "group": "secondary",
            "id": "category",
            "label": "Category",
            "queryParamNames": Array [
              "pub_category",
            ],
            "type": "SelectSingleFilter",
          },
          Object {
            "config": Object {
              "options": Array [
                Object {
                  "key": "agree",
                  "label": "I agree to Terms of Use",
                },
              ],
              "searchMode": "has_all",
            },
            "group": "secondary",
            "id": "termsOfUse",
            "label": "Terms Of Use",
            "queryParamNames": Array [
              "pub_termsOfUse",
            ],
            "type": "SelectMultipleFilter",
          },
          Object {
            "config": Object {
              "options": Array [
                Object {
                  "key": "towels",
                  "label": "Towels",
                },
                Object {
                  "key": "bathroom",
                  "label": "Bathroom",
                },
                Object {
                  "key": "swimming_pool",
                  "label": "Swimming pool",
                },
                Object {
                  "key": "own_drinks",
                  "label": "Own drinks allowed",
                },
                Object {
                  "key": "jacuzzi",
                  "label": "Jacuzzi",
                },
                Object {
                  "key": "audiovisual_entertainment",
                  "label": "Audiovisual entertainment",
                },
                Object {
                  "key": "barbeque",
                  "label": "Barbeque",
                },
                Object {
                  "key": "own_food_allowed",
                  "label": "Own food allowed",
                },
              ],
              "searchMode": "has_all",
            },
            "group": "secondary",
            "id": "amenities",
            "label": "Amenities",
            "queryParamNames": Array [
              "pub_amenities",
            ],
            "type": "SelectMultipleFilter",
          },
          Object {
            "config": Object {
              "options": Array [
                Object {
                  "key": "keyboard",
                  "label": "Keyboard",
                },
                Object {
                  "key": "guitar",
                  "label": "Guitar",
                },
                Object {
                  "key": "vocals",
                  "label": "Vocals",
                },
              ],
              "searchMode": "has_all",
            },
            "group": "secondary",
            "id": "instruments",
            "label": "Instruments",
            "queryParamNames": Array [
              "instruments",
            ],
            "type": "SelectMultipleFilter",
          },
        ]
      }
      history={
        Object {
          "push": [Function],
        }
      }
      listings={Array []}
      onActivateListing={[Function]}
      onCloseModal={[Function]}
      onManageDisableScrolling={[Function]}
      onMapIconClick={[Function]}
      onOpenModal={[Function]}
      pagination={
        Object {
          "page": 1,
          "perPage": 12,
          "totalItems": 22,
          "totalPages": 2,
        }
      }
      resultsCount={0}
      rootClassName={null}
      searchInProgress={false}
      searchListingsError={null}
      searchParamsAreInSync={true}
      searchParamsForPagination={Object {}}
      showAsModalMaxWidth={768}
      sortConfig={
        Object {
          "active": true,
          "conflictingFilters": Array [
            "keyword",
          ],
          "options": Array [
            Object {
              "key": "createdAt",
              "label": "Newest",
            },
            Object {
              "key": "-createdAt",
              "label": "Oldest",
            },
            Object {
              "key": "-price",
              "label": "Lowest price",
            },
            Object {
              "key": "price",
              "label": "Highest price",
            },
            Object {
              "key": "relevance",
              "label": "Relevance",
              "longLabel": "Relevance (Keyword search)",
            },
          ],
          "queryParamName": "sort",
          "relevanceKey": "relevance",
        }
      }
      urlQueryParams={Object {}}
    />
    <withViewport(ModalInMobileComponent)
      id="SearchPage.map"
      isModalOpenOnMobile={false}
      onClose={[Function]}
      onManageDisableScrolling={[Function]}
      showAsModalMaxWidth={768}
    >
      <div>
        <withRouter(SearchMapComponent)
          activeListingId={null}
          isSearchMapOpenOnMobile={false}
          listings={Array []}
          location={
            Object {
              "search": "",
            }
          }
          onCloseAsModal={[Function]}
          onMapMoveEnd={[Function]}
        />
      </div>
    </withViewport(ModalInMobileComponent)>
  </div>
</Page>
`;
